import org.antlr.v4.runtime.tree.ParseTreeVisitor;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.tree.*;
import org.antlr.v4.runtime.CharStreams;
import java.io.IOException;

public class main {
	public static void main(String[] args) throws IOException{

		// we expect exactly one argument: the name of the input file
		if (args.length!=1) {
			System.err.println("\n");
			System.err.println("Simple calculator\n");
			System.err.println("=================\n\n");
			System.err.println("Please give as input argument a filename\n");
			System.exit(-1);
		}
		String filename=args[0];

		// open the input file
		CharStream input = CharStreams.fromFileName(filename);
		//new ANTLRFileStream (filename); // depricated

		// create a lexer/scanner
		simpleCalcLexer lex = new simpleCalcLexer(input);

		// get the stream of tokens from the scanner
		CommonTokenStream tokens = new CommonTokenStream(lex);

		// create a parser
		simpleCalcParser parser = new simpleCalcParser(tokens);

		// and parse anything from the grammar for "start"
		ParseTree parseTree = parser.start();

		// Construct an interpreter and run it on the parse tree
		Interpreter interpreter = new Interpreter();
		Double result=interpreter.visit(parseTree);

		System.out.println("The result is: "+result);
	}
}

// We write an interpreter that implements interface
// "simpleCalcVisitor<T>" that is automatically generated by ANTLR
// This is parameterized over a return type "<T>" which is in our case
// simply a Double.

class Interpreter extends AbstractParseTreeVisitor<Double> implements simpleCalcVisitor<Double> {

	static Environment env=new Environment();

	public Double visitStart(simpleCalcParser.StartContext ctx){
		visit(ctx.sq);
		return visit(ctx.e);
	}

	public Double visitStatseq(simpleCalcParser.StatseqContext ctx) {
		for (simpleCalcParser.StatContext stat: ctx.s) {
			visit(stat);
		}
		return null;
	}

	public Double visitLoop(simpleCalcParser.LoopContext ctx) {
		while(visit(ctx.e) != 0.0) {
			visit(ctx.sq);
		}
		return null;
	}

	public Double visitNot(simpleCalcParser.NotContext ctx) {
		if(visit(ctx.e).equals(0.0)) {
			return 1.0;
		}
		return 0.0;
	}

	public Double visitAssign(simpleCalcParser.AssignContext ctx){
		Double d = visit( ctx.e);
		env.setVariable(ctx.x.getText(),d);
		return d;
	}

	public Double visitParenthesis(simpleCalcParser.ParenthesisContext ctx){
		return visit(ctx.e);
	}

	public Double visitVariable(simpleCalcParser.VariableContext ctx){
		return env.getVariable(ctx.x.getText());
	}

	public Double visitOr(simpleCalcParser.OrContext ctx) {
		if(visit(ctx.e1).equals(0.0) || visit(ctx.e2).equals(0.0)) {
			return 1.0;
		}
		return 0.0;
	}

	public Double visitBigSmall(simpleCalcParser.BigSmallContext ctx) {
		if(ctx.b.getText().equals("<")) {
			if(visit(ctx.e1) < visit(ctx.e2)) {
				return 1.0;
			}
			return 0.0;
		}
		if(ctx.b.getText().equals(">")) {
			if(visit(ctx.e1) > visit(ctx.e2)) {
				return 1.0;
			}
			return 0.0;
		}
		return null;
	}

	public Double visitMulDiv(simpleCalcParser.MulDivContext ctx) {
		if (ctx.op.getText().equals("*"))
			return visit(ctx.e1)*visit(ctx.e2);
		else
			return visit(ctx.e1)/visit(ctx.e2);
	}

	public Double visitAddSub(simpleCalcParser.AddSubContext ctx) {
		if (ctx.op.getText().equals("+"))
			return visit(ctx.e1)+visit(ctx.e2);
		else
			return visit(ctx.e1)-visit(ctx.e2);
	}

	public Double visitConstant(simpleCalcParser.ConstantContext ctx){
		return Double.parseDouble(ctx.n.getText());
	}

	public Double visitAnd(simpleCalcParser.AndContext ctx) {
		if(visit(ctx.e1).equals(1.0) && visit(ctx.e2).equals(1.0)) {
			return 1.0;
		}
		return 0.0;
	}

	public Double visitEqualNot(simpleCalcParser.EqualNotContext ctx) {
		if(ctx.b.getText().equals("==")) {
			if(visit(ctx.e1).equals(visit(ctx.e2))) {
				return 1.0;
			}
			return 0.0;
		}
		if(ctx.b.getText().equals("!=")) {
			if(visit(ctx.e1).equals(visit(ctx.e2))) {
				return 0.0;
			}
			return 1.0;
		}
		return null;
	}

	public Double visitIfelse(simpleCalcParser.IfelseContext ctx) {
		if(visit(ctx.e).equals(0.0)) {
			return visit(ctx.sq2);
		} else {
			return visit(ctx.sq1);
		}
	}

	public Double visitIf(simpleCalcParser.IfContext ctx) {
		if(visit(ctx.e) != 0.0) {
			return visit(ctx.sq);
		}
		return null;
	}
}